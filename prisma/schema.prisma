// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String                    @id @default(cuid()) @map("_id")
  username         String                    @unique
  password         String
  avatar           String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  messages         Message[]
  messageReceipts  MessageReceipt[]
  conversations    ConversationParticipant[]
  sentRequests     FriendRequest[]           @relation("SentRequests")
  recievedRequests FriendRequest[]           @relation("ReceivedRequests")
}

model Conversation {
  id           String                    @id @default(cuid()) @map("_id")
  title        String?
  isGroup      Boolean                   @default(false)
  uniqueId     String                    @unique
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid()) @map("_id")
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id              String           @id @default(cuid()) @map("_id")
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  senderId        String
  conversationId  String
  messageReceipts MessageReceipt[]
  sender          User             @relation(fields: [senderId], references: [id])
  conversation    Conversation     @relation(fields: [conversationId], references: [id])
}

model MessageReceipt {
  id        String   @id @default(cuid()) @map("_id")
  status    String
  timestamp DateTime @default(now())
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model FriendRequest {
  id         String   @id @default(cuid()) @map("_id")
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}
